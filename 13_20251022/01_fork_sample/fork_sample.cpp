#include <iostream>
#include <unistd.h>    // Для fork(), getpid(), getppid()
#include <sys/wait.h>  // Для wait()
#include <cstdlib>     // Для exit()

int main() {
    // Создаем новый процесс
    // fork() возвращает:
    // - >0 в родительском процессе (PID дочернего)
    // - 0 в дочернем процессе
    // - -1 в случае ошибки
    pid_t pid = fork();

    // Проверяем успешность создания процесса
    if (pid == -1) {
        // Выводим сообщение об ошибке в stderr
        std::cerr << "Ошибка при создании процесса!" << std::endl;
        return 1;  // Завершаем программу с кодом ошибки
    }
    else if (pid == 0) {
        // Этот блок выполняется только в дочернем процессе
        // getpid() возвращает PID текущего процесса
        std::cout << "Дочерний процесс: PID = " << getpid() 
                  << ", PPID (родитель) = " << getppid() << std::endl;
        
        // Завершаем дочерний процесс с кодом 0 (успех)
        exit(0);
    }
    else {
        // Этот блок выполняется только в родительском процессе
        std::cout << "Родительский процесс: PID = " << getpid() 
                  << ", Дочерний PID = " << pid << std::endl;
        
        // Ожидаем завершения дочернего процесса
        // wait() приостанавливает выполнение родителя до завершения дочернего процесса
        int status;
        wait(&status);  // &status - указатель на переменную для кода завершения
        
        std::cout << "Дочерний процесс завершился с кодом: " 
                  << WEXITSTATUS(status) << std::endl;
    }

    return 0;
}